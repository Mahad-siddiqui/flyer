{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/DT/Documents/perfect/perfect/src/app/api/qr-code/generate/route.ts"],"sourcesContent":["// src/app/api/qr-code/generate/route.ts\nimport { NextRequest, NextResponse } from \"next/server\";\nimport QRCode from \"qrcode\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { url, size = 256 } = await request.json();\n\n    if (!url) {\n      return NextResponse.json({ error: \"URL is required\" }, { status: 400 });\n    }\n\n    // Generate QR code as PNG buffer\n    const qrCodeBuffer = await QRCode.toBuffer(url, {\n      type: \"png\",\n      width: size,\n      margin: 2,\n      color: {\n        dark: \"#000000\",\n        light: \"#FFFFFF\",\n      },\n    });\n\n    // Return the image\n    return new NextResponse(qrCodeBuffer, {\n      headers: {\n        \"Content-Type\": \"image/png\",\n        \"Content-Length\": qrCodeBuffer.length.toString(),\n      },\n    });\n  } catch (error) {\n    console.error(\"Error generating QR code:\", error);\n    return NextResponse.json(\n      { error: \"Failed to generate QR code\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"AAAA,wCAAwC;;;;AACxC;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,OAAO,GAAG,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,IAAI,CAAC,KAAK;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,iCAAiC;QACjC,MAAM,eAAe,MAAM,wIAAA,CAAA,UAAM,CAAC,QAAQ,CAAC,KAAK;YAC9C,MAAM;YACN,OAAO;YACP,QAAQ;YACR,OAAO;gBACL,MAAM;gBACN,OAAO;YACT;QACF;QAEA,mBAAmB;QACnB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,cAAc;YACpC,SAAS;gBACP,gBAAgB;gBAChB,kBAAkB,aAAa,MAAM,CAAC,QAAQ;YAChD;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}